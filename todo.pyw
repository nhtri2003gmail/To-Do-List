# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'todo.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from datetime import datetime
import threading
import requests
import time
import json
import os

job_list = [[],[],[],[]]
history_job_list = []

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(995, 663)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons/note.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.tabWidget.setFont(font)
        self.tabWidget.setObjectName("tabWidget")
        self.todo_tab = QtWidgets.QWidget()
        self.todo_tab.setObjectName("todo_tab")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.todo_tab)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.top = QtWidgets.QFrame(self.todo_tab)
        self.top.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.top.setFrameShadow(QtWidgets.QFrame.Raised)
        self.top.setObjectName("top")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.top)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.important_lst = QtWidgets.QListWidget(self.top)
        self.important_lst.setStyleSheet("QListWidget {\n"
"    font: 75 12pt \"Arial\";\n"
"    background-color: yellow;\n"
"}")
        self.important_lst.setDragDropMode(QtWidgets.QAbstractItemView.InternalMove)
        self.important_lst.setObjectName("important_lst")
        self.gridLayout_2.addWidget(self.important_lst, 1, 2, 1, 1)
        self.urgent_lst = QtWidgets.QListWidget(self.top)
        self.urgent_lst.setStyleSheet("QListWidget {\n"
"    font: 75 12pt \"Arial\";\n"
"    background-color: \'orange\';\n"
"}")
        self.urgent_lst.setDragDropMode(QtWidgets.QAbstractItemView.InternalMove)
        self.urgent_lst.setObjectName("urgent_lst")
        self.gridLayout_2.addWidget(self.urgent_lst, 0, 1, 1, 1)
        self.none_lst = QtWidgets.QListWidget(self.top)
        self.none_lst.setStyleSheet("QListWidget {\n"
"    font: 75 12pt \"Arial\";\n"
"}")
        self.none_lst.setDragDropMode(QtWidgets.QAbstractItemView.InternalMove)
        self.none_lst.setObjectName("none_lst")
        self.gridLayout_2.addWidget(self.none_lst, 1, 1, 1, 1)
        self.urgent_important_lst = QtWidgets.QListWidget(self.top)
        self.urgent_important_lst.setToolTip("")
        self.urgent_important_lst.setStatusTip("")
        self.urgent_important_lst.setStyleSheet("QListWidget {\n"
"    font: 75 12pt \"Arial\";\n"
"    color: white;\n"
"    background-color: red;\n"
"}")
        self.urgent_important_lst.setDragDropMode(QtWidgets.QAbstractItemView.InternalMove)
        self.urgent_important_lst.setObjectName("urgent_important_lst")
        self.gridLayout_2.addWidget(self.urgent_important_lst, 0, 2, 1, 1)
        self.gridLayout_4.addWidget(self.top, 0, 0, 1, 1)
        self.bottom = QtWidgets.QFrame(self.todo_tab)
        self.bottom.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.bottom.setFrameShadow(QtWidgets.QFrame.Raised)
        self.bottom.setObjectName("bottom")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.bottom)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.groupBox = QtWidgets.QGroupBox(self.bottom)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.groupBox.setFont(font)
        self.groupBox.setObjectName("groupBox")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.groupBox)
        self.verticalLayout.setObjectName("verticalLayout")
        self.add_btn = QtWidgets.QPushButton(self.groupBox)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.add_btn.setFont(font)
        self.add_btn.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icons/plus.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.add_btn.setIcon(icon1)
        self.add_btn.setObjectName("add_btn")
        self.verticalLayout.addWidget(self.add_btn)
        self.save_btn = QtWidgets.QPushButton(self.groupBox)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.save_btn.setFont(font)
        self.save_btn.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("icons/save.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.save_btn.setIcon(icon2)
        self.save_btn.setObjectName("save_btn")
        self.verticalLayout.addWidget(self.save_btn)
        self.delete_btn = QtWidgets.QPushButton(self.groupBox)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.delete_btn.setFont(font)
        self.delete_btn.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("icons/trash.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.delete_btn.setIcon(icon3)
        self.delete_btn.setObjectName("delete_btn")
        self.verticalLayout.addWidget(self.delete_btn)
        self.horizontalLayout.addWidget(self.groupBox)
        self.frame = QtWidgets.QFrame(self.bottom)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.title_lne = QtWidgets.QLineEdit(self.frame)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.title_lne.setFont(font)
        self.title_lne.setObjectName("title_lne")
        self.gridLayout_3.addWidget(self.title_lne, 1, 1, 1, 1)
        self.content_txt = QtWidgets.QPlainTextEdit(self.frame)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.content_txt.setFont(font)
        self.content_txt.setObjectName("content_txt")
        self.gridLayout_3.addWidget(self.content_txt, 5, 1, 1, 1)
        self.type_cbb = QtWidgets.QComboBox(self.frame)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.type_cbb.setFont(font)
        self.type_cbb.setStyleSheet("")
        self.type_cbb.setObjectName("type_cbb")
        self.type_cbb.addItem("")
        self.type_cbb.addItem("")
        self.type_cbb.addItem("")
        self.type_cbb.addItem("")
        self.gridLayout_3.addWidget(self.type_cbb, 7, 1, 1, 1)
        self.content_lbl = QtWidgets.QLabel(self.frame)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.content_lbl.setFont(font)
        self.content_lbl.setWordWrap(False)
        self.content_lbl.setObjectName("content_lbl")
        self.gridLayout_3.addWidget(self.content_lbl, 5, 0, 1, 1)
        self.title_lbl = QtWidgets.QLabel(self.frame)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.title_lbl.setFont(font)
        self.title_lbl.setObjectName("title_lbl")
        self.gridLayout_3.addWidget(self.title_lbl, 1, 0, 1, 1)
        self.type_lbl = QtWidgets.QLabel(self.frame)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.type_lbl.setFont(font)
        self.type_lbl.setObjectName("type_lbl")
        self.gridLayout_3.addWidget(self.type_lbl, 7, 0, 1, 1)
        self.horizontalLayout.addWidget(self.frame)
        self.gridLayout_4.addWidget(self.bottom, 1, 0, 1, 1)
        self.tabWidget.addTab(self.todo_tab, "")
        self.history_tab = QtWidgets.QWidget()
        self.history_tab.setObjectName("history_tab")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.history_tab)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.top_history = QtWidgets.QFrame(self.history_tab)
        self.top_history.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.top_history.setFrameShadow(QtWidgets.QFrame.Raised)
        self.top_history.setObjectName("top_history")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.top_history)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.history_lst = QtWidgets.QListWidget(self.top_history)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.history_lst.setFont(font)
        self.history_lst.setObjectName("history_lst")
        self.verticalLayout_4.addWidget(self.history_lst)
        self.verticalLayout_3.addWidget(self.top_history)
        self.bottom_history = QtWidgets.QFrame(self.history_tab)
        self.bottom_history.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.bottom_history.setFrameShadow(QtWidgets.QFrame.Raised)
        self.bottom_history.setObjectName("bottom_history")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.bottom_history)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.groupBox_2 = QtWidgets.QGroupBox(self.bottom_history)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.groupBox_2.setFont(font)
        self.groupBox_2.setObjectName("groupBox_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.groupBox_2)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.restore_btn = QtWidgets.QPushButton(self.groupBox_2)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.restore_btn.setFont(font)
        self.restore_btn.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("icons/undo.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.restore_btn.setIcon(icon4)
        self.restore_btn.setObjectName("restore_btn")
        self.verticalLayout_2.addWidget(self.restore_btn)
        self.clear_btn = QtWidgets.QPushButton(self.groupBox_2)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.clear_btn.setFont(font)
        self.clear_btn.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("icons/clear.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.clear_btn.setIcon(icon5)
        self.clear_btn.setObjectName("clear_btn")
        self.verticalLayout_2.addWidget(self.clear_btn)
        self.horizontalLayout_2.addWidget(self.groupBox_2)
        self.frame_2 = QtWidgets.QFrame(self.bottom_history)
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.frame_2)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.type_history_lbl = QtWidgets.QLabel(self.frame_2)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.type_history_lbl.setFont(font)
        self.type_history_lbl.setObjectName("type_history_lbl")
        self.gridLayout_5.addWidget(self.type_history_lbl, 7, 0, 1, 1)
        self.title_history_lne = QtWidgets.QLineEdit(self.frame_2)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.title_history_lne.setFont(font)
        self.title_history_lne.setReadOnly(True)
        self.title_history_lne.setObjectName("title_history_lne")
        self.gridLayout_5.addWidget(self.title_history_lne, 1, 1, 1, 1)
        self.content_history_txt = QtWidgets.QPlainTextEdit(self.frame_2)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.content_history_txt.setFont(font)
        self.content_history_txt.setReadOnly(True)
        self.content_history_txt.setObjectName("content_history_txt")
        self.gridLayout_5.addWidget(self.content_history_txt, 5, 1, 1, 1)
        self.title_history_lbl = QtWidgets.QLabel(self.frame_2)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.title_history_lbl.setFont(font)
        self.title_history_lbl.setObjectName("title_history_lbl")
        self.gridLayout_5.addWidget(self.title_history_lbl, 1, 0, 1, 1)
        self.content_history_lbl = QtWidgets.QLabel(self.frame_2)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.content_history_lbl.setFont(font)
        self.content_history_lbl.setWordWrap(False)
        self.content_history_lbl.setObjectName("content_history_lbl")
        self.gridLayout_5.addWidget(self.content_history_lbl, 5, 0, 1, 1)
        self.lineEdit = QtWidgets.QLineEdit(self.frame_2)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.lineEdit.setFont(font)
        self.lineEdit.setReadOnly(True)
        self.lineEdit.setObjectName("lineEdit")
        self.gridLayout_5.addWidget(self.lineEdit, 7, 1, 1, 1)
        self.horizontalLayout_2.addWidget(self.frame_2)
        self.verticalLayout_3.addWidget(self.bottom_history)
        self.tabWidget.addTab(self.history_tab, "")
        self.gridLayout.addWidget(self.tabWidget, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 995, 26))
        self.menubar.setObjectName("menubar")
        self.menuCheck_for_updates = QtWidgets.QMenu(self.menubar)
        self.menuCheck_for_updates.setObjectName("menuCheck_for_updates")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menu_update = QtWidgets.QAction(MainWindow)
        self.menu_update.setObjectName("menu_update")
        self.actionCTRL_SHIFT = QtWidgets.QAction(MainWindow)
        self.actionCTRL_SHIFT.setObjectName("actionCTRL_SHIFT")
        self.menu_about = QtWidgets.QAction(MainWindow)
        self.menu_about.setObjectName("menu_about")
        self.actionDelete = QtWidgets.QAction(MainWindow)
        self.actionDelete.setShortcut("")
        self.actionDelete.setObjectName("actionDelete")
        self.menuCheck_for_updates.addAction(self.menu_update)
        self.menuCheck_for_updates.addAction(self.menu_about)
        self.menubar.addAction(self.menuCheck_for_updates.menuAction())

        model = self.type_cbb.model()
        model.item(0).setBackground(QtGui.QColor('red'))
        model.item(0).setForeground(QtGui.QColor('white'))
        model.item(1).setBackground(QtGui.QColor('orange'))
        model.item(1).setForeground(QtGui.QColor('black'))
        model.item(2).setBackground(QtGui.QColor('yellow'))
        model.item(2).setForeground(QtGui.QColor('black'))
        model.item(3).setBackground(QtGui.QColor('white'))
        model.item(3).setForeground(QtGui.QColor('black'))
        self.history_lst.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
        self.job_num = -1
        self.job_type = -1
        self.view_list = [self.urgent_important_lst, self.urgent_lst, self.important_lst, self.none_lst]

        self.type_cbb.activated.connect(self.set_type_color)
        self.add_btn.clicked.connect(self.add_job)
        self.delete_btn.clicked.connect(lambda: self.delete_job(-1, -1))
        self.save_btn.clicked.connect(self.save_job)
        self.restore_btn.clicked.connect(self.restore_history_job)
        self.clear_btn.clicked.connect(self.clear_history_job)
        self.menu_update.triggered.connect(self.check_update)
        self.menu_about.triggered.connect(self.show_about)
        self.view_list[0].itemClicked.connect(lambda: self.set_details(0))
        self.view_list[1].itemClicked.connect(lambda: self.set_details(1))
        self.view_list[2].itemClicked.connect(lambda: self.set_details(2))
        self.view_list[3].itemClicked.connect(lambda: self.set_details(3))
        self.history_lst.itemClicked.connect(self.set_history_details)
        self.set_type_color()

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "To-do list"))
        self.groupBox.setTitle(_translate("MainWindow", "Action"))
        self.add_btn.setToolTip(_translate("MainWindow", "Add new job (Ctrl + A)"))
        self.add_btn.setShortcut(_translate("MainWindow", "Ctrl+A"))
        self.save_btn.setToolTip(_translate("MainWindow", "Save edited job (Ctrl + S)"))
        self.save_btn.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.delete_btn.setToolTip(_translate("MainWindow", "Delete job (Ctrl + D)"))
        self.delete_btn.setShortcut(_translate("MainWindow", "Ctrl+D"))
        self.type_cbb.setItemText(0, _translate("MainWindow", "Urgent & Important"))
        self.type_cbb.setItemText(1, _translate("MainWindow", "Urgent & Not important"))
        self.type_cbb.setItemText(2, _translate("MainWindow", "Not urgent & Important"))
        self.type_cbb.setItemText(3, _translate("MainWindow", "Not urgent & Not important"))
        self.content_lbl.setText(_translate("MainWindow", "Content:  "))
        self.title_lbl.setText(_translate("MainWindow", "Title:"))
        self.type_lbl.setText(_translate("MainWindow", "Type:"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.todo_tab), _translate("MainWindow", "To-do"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Action"))
        self.restore_btn.setToolTip(_translate("MainWindow", "Restore deleted job (Ctrl + Z)"))
        self.restore_btn.setShortcut(_translate("MainWindow", "Ctrl+Z"))
        self.clear_btn.setToolTip(_translate("MainWindow", "Delete job permanently"))
        self.type_history_lbl.setText(_translate("MainWindow", "Type:"))
        self.title_history_lbl.setText(_translate("MainWindow", "Title:"))
        self.content_history_lbl.setText(_translate("MainWindow", "Content:  "))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.history_tab), _translate("MainWindow", "History"))
        self.menuCheck_for_updates.setTitle(_translate("MainWindow", "Help"))
        self.menu_update.setText(_translate("MainWindow", "Check for updates"))
        self.menu_update.setShortcut(_translate("MainWindow", "Ctrl+U"))
        self.actionCTRL_SHIFT.setText(_translate("MainWindow", "CTRL_SHIFT"))
        self.menu_about.setText(_translate("MainWindow", "About"))
        self.actionDelete.setText(_translate("MainWindow", "Delete"))

    def check_update(self):
        choice = [-1]
        msg = QtWidgets.QMessageBox()
        msg.setIcon(QtWidgets.QMessageBox.Information)
        msg.setStandardButtons(QtWidgets.QMessageBox.Cancel | QtWidgets.QMessageBox.Ok)

        t = threading.Thread(target=self.check_update_internal, args=(msg,choice,))
        t.daemon = True
        t.start()

        choice[0] = msg.exec()
        while choice[0]!=0 and choice[0]!=1024 and choice[0]!=4194304:
            time.sleep(0.5)
        if choice[0]==0:
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Information)
            msg.setWindowTitle("Update successfully")
            msg.setText("Please restart program to make changes!")
            msg.exec()
            exit(1)

    def check_update_internal(self, msg, choice):
        msg.setWindowTitle("Update")
        msg.setText("Checking for any updates...\nPlease don't close this popup!     ")
        while True:
            re = requests.get('https://github.com/nhtri2003gmail/To-Do-List/releases/download/update/todo.pyw')
            if re.content[:23] == b'# -*- coding: utf-8 -*-':
                break
        datas = open(sys.argv[0], 'rb').read()
        if datas!=re.content:
            msg.setText("Update available, install?")
            while choice[0]!=1024 and choice[0]!=4194304:
                time.sleep(0.5)
            if choice[0]==1024:
                open(sys.argv[0], 'wb').write()
                choice[0] = 0
                exit(1)
        else:
            msg.setText("No update available")

    def show_about(self):
        msg = QtWidgets.QMessageBox()
        msg.setIcon(QtWidgets.QMessageBox.Information)
        msg.setWindowTitle("About")
        msg.setText("To-Do list version 1.0\nThis application is inspired by Eisenhower Box strategy for time management\n\nCredit: Johnathan Huu Tri")
        msg.exec()

    def set_type_color(self):
        if self.type_cbb.currentIndex()==0:
            self.type_cbb.setStyleSheet("background-color: red; color: white")
        elif self.type_cbb.currentIndex()==1:
            self.type_cbb.setStyleSheet("background-color: orange")
        elif self.type_cbb.currentIndex()==2:
            self.type_cbb.setStyleSheet("background-color: yellow")
        elif self.type_cbb.currentIndex()==3:
            self.type_cbb.setStyleSheet("background-color: white")

    def load_job(self):
        if os.path.exists('jobs.dat'):
            global job_list
            job_list = json.loads(open('jobs.dat', 'r').read())
            for i in range(4):
                for job in job_list[i]:
                    self.view_list[i].addItem(job['title'])
        if os.path.exists('history_jobs.dat'):
            global history_job_list
            history_job_list = json.loads(open('history_jobs.dat', 'r').read())
            for job in history_job_list:
                self.history_lst.insertItem(0, job["time"] + ' - ' + job['title'])

    def add_job(self):
        global job_list
        title = self.title_lne.text()
        content = self.content_txt.toPlainText()
        job_type = self.type_cbb.currentIndex()
        if title.strip():
            self.view_list[job_type].addItem(title)
            job_list[job_type].append({'title': title, 'content': content})
            open('jobs.dat', 'w').write(json.dumps(job_list))

            self.title_lne.setText("")
            self.content_txt.clear()
            self.type_cbb.setCurrentIndex(0)
            self.job_num=-1
            self.job_type=-1
            self.set_type_color()

    def set_details(self, job_type):
        self.type_cbb.setCurrentIndex(job_type)
        self.job_type = job_type
        self.job_num = self.view_list[job_type].currentRow()
        self.title_lne.setText(job_list[job_type][self.job_num]['title'])
        self.content_txt.clear()
        self.content_txt.insertPlainText(job_list[job_type][self.job_num]['content'])
        self.set_type_color()

    def delete_job(self, job_num=-1, job_type=-1):
        if job_num==-1 and job_type==-1:
            if self.job_num!=-1 and self.job_type!=-1:
                self.view_list[self.job_type].removeItemWidget(self.view_list[self.job_type].takeItem(self.job_num))
                history_job_list.append(job_list[self.job_type][self.job_num])
                history_job_list[-1]['type'] = self.job_type
                history_job_list[-1]['time'] = datetime.now().strftime('[%I:%M%p - %d/%m/%Y]')
                del job_list[self.job_type][self.job_num]
                open('jobs.dat', 'w').write(json.dumps(job_list))
                open('history_jobs.dat', 'w').write(json.dumps(history_job_list))

                self.history_lst.insertItem(0, history_job_list[-1]["time"] + ' - ' + history_job_list[-1]['title'])
                self.title_lne.setText("")
                self.content_txt.clear()
                self.type_cbb.setCurrentIndex(0)
                self.set_type_color()
                self.job_num=-1
                self.job_type=-1
        else:
            self.view_list[job_type].removeItemWidget(self.view_list[job_type].takeItem(job_num))
            del job_list[job_type][job_num]
            open('jobs.dat', 'w').write(json.dumps(job_list))

    def save_job(self):
        global job_list
        title = self.title_lne.text()
        content = self.content_txt.toPlainText()
        job_type = self.type_cbb.currentIndex()
        if job_type!=self.job_type:
            self.delete_job(self.job_num, self.job_type)
            self.add_job()
        else:
            job_list[self.job_type][self.job_num]['title'] = title
            job_list[self.job_type][self.job_num]['content'] = content
            self.view_list[self.job_type].item(self.job_num).setText(title)
            open('jobs.dat', 'w').write(json.dumps(job_list))

    def set_history_details(self):
        job_num = self.history_lst.currentRow()
        job_index = len(history_job_list) - job_num - 1
        self.title_history_lne.setText(history_job_list[job_index]['title'])
        self.content_history_txt.clear()
        self.content_history_txt.insertPlainText(history_job_list[job_index]['content'])
        if int(history_job_list[job_index]['type'])==0:
            self.lineEdit.setText('Urgent & Important')
        elif int(history_job_list[job_index]['type'])==1:
            self.lineEdit.setText('Urgent & Not important')
        elif int(history_job_list[job_index]['type'])==2:
            self.lineEdit.setText('Not urgent & Important')
        elif int(history_job_list[job_index]['type'])==3:
            self.lineEdit.setText('Not urgent & Not important')

    def restore_history_job(self):
        history_jobs = self.history_lst.selectedItems()
        for job in history_jobs:
            job_num = self.history_lst.indexFromItem(job).row()
            job_index = len(history_job_list) - job_num - 1
            self.title_lne.setText(history_job_list[job_index]['title'])
            self.content_txt.clear()
            self.content_txt.insertPlainText(history_job_list[job_index]['content'])
            self.type_cbb.setCurrentIndex(int(history_job_list[job_index]['type']))
            self.add_job()
        self.clear_history_job()

    def clear_history_job(self):
        global history_job_list
        history_jobs = self.history_lst.selectedItems()
        for job in history_jobs:
            job_num = self.history_lst.indexFromItem(job).row()
            del history_job_list[len(history_job_list) - job_num - 1]
            self.history_lst.removeItemWidget(self.history_lst.takeItem(job_num))
        open('history_jobs.dat', 'w').write(json.dumps(history_job_list))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    ui.load_job()
    MainWindow.show()
    sys.exit(app.exec_())
